import copy
import math
import time
import tkinter as tk

import keyboard
import numpy as np
import pygame
import win32con
import win32gui
from playsound import playsound

window_yoko = 160
bunkatu = 4
window_ma_zin = 30
hantei_key = {"d":0,"f":1,"j":2,"k":3}
hantei_ma_zin = 1
hantei_input = [False for i in range(bunkatu)]
pygame.mixer.init()
se = pygame.mixer.Sound("ka.mp3")
BGM = pygame.mixer.Sound("chinoi.mp3")

root = tk.Tk()
def key_event(key):
    if (key.keysym in hantei_key.keys()):
        hantei_input[hantei_key[key.keysym]] = True
root.bind("<KeyPress>", key_event)
root.update()
win32gui.MoveWindow(int(root.frame(),16), 1000, 0, 100, 100,True)
    
#拍数で決める +-ね
fps = 30
BPM = 180
#拍数ね
nagasa = 4 * 48
"""
基本的に
・4拍子です
・音ゲー的位置とアニメーション的位置が存在しています
・音ゲー的位置:絶対座標
・アニメーション的位置:相対座標
↑なんてねえよ全部相対座標になりました
↑やっぱあります
ちまみに判定ラインはすべて相対座標です

フレーム数→拍数
(frame) / fps / 60 * BPM

拍数→フレーム数
(haku) / BPM * 60 * fps
[小節(0.0-inf),拍(0.0 - 4.0),イベントの種類(0-6)...
    [?,?,0,落ちるところ(0-15),今から何拍先に現れるか,動きを判定ラインに同期しないか(0 or 1)(1で同期しない),連動操作時に使用するタグ(str),速度(px/haku)...
    テレポートさせる [?,?,1,連動操作時に使用するタグ(str),x座標(float),y座標(float)]
    ※移動させる時に指定するX,y座標は今のX,y座標からの相対指定です
    現在の位置を起点として移動させる [?,?,2,連動操作時に使用するタグ(str),x座標(float),y座標(float),ベジェ曲線の名前(str),移動にかかる拍数(float)]
    ウィンドウを消す、表示する(一時的) ※本当に消すのは重いので遠いとこにテレポートさせています
    [?,?,3,連動操作時に使用するタグ(str),消すかどうか(0 or 1)(1で消す)]
    ベジェ曲線を作成 ※[0.0,0.0]が移動元、[1.0,1.0]が移動先です ※同じ名前を使おうとすると上書きされます ※いまのところ制御点が4つのベジェ曲線しか作成できません ※第1,2引数を0にして最初に読ませるを推奨します
    [?,?,4,名前(str),[制御点1のx座標(float),制御点1のy座標(float)],[制御点2のx座標(float),制御点2のy座標(float)],[制御点3のx座標(float),制御点3のy座標(float)],[制御点4のx座標(float),制御点4のy座標(float)]]
    テレポートさせる(判定ライン) [?,?,5,判定ライン番号(0-15),[移動先x座標(float),移動先y座標(float)]]
    現在の位置を起点として移動させる(判定ライン) [?,?,6,判定ライン番号(0-15),[移動先x座標(float),移動先y座標(float)],ベジェ曲線の名前(str),移動にかかる拍数(float)]
サンプル

"""

humen = [
[0,0,4,"直線",[[0.0,0.0],[1.0,1.0]]],
[0,0,4,"11",[[0.0,0.0],[1.0,1.0],[1.0,1.0],[1.0,1.0]]],
[0,0,4,"10",[[0.0,0.0],[0.0,0.0],[0.0,0.0],[1.0,1.0]]],
[0,0,5,[0],[0,0]],
[0,0,0,0,4,1,"0",100],
[0,0,0,3,4,1,"0",100],
[0,0,0,1,5,1,"0",100],
[0,0,0,2,6,1,"0",100],
[0,0,0,1,7,1,"0",100],

[1,0,0,0,4,1,"0",100],
[1,0,0,3,4,1,"0",100],
[1,0,0,2,5,1,"0",100],
[1,0,0,0,6,1,"0",100],
[1,0,0,3,6,1,"0",100],
[1,0,0,1,6,1,"0",100],
[1,0,0,2,7,1,"0",100],

[2,0,0,0,4,1,"0",100],
[2,0,0,3,4,1,"0",100],
[2,0,0,1,5,1,"0",100],
[2,0,0,2,6,1,"0",100],
[2,0,0,1,7,1,"0",100],

[3,0,0,0,4,1,"0",100],
[3,0,0,3,4,1,"0",100],
[3,0,0,2,5,1,"0",100],
[3,0,0,1,6,1,"0",100],
[3,0,0,2,7,1,"0",100],

[4,0,0,0,4,1,"0",100],
[4,0,0,3,4,1,"0",100],
[4,0,0,1,5,1,"0",100],
[4,0,0,2,6,1,"0",100],
[4,0,0,1,7,1,"0",100],

[5,0,0,0,4,1,"0",100],
[5,0,0,3,4,1,"0",100],
[5,0,0,2,5,1,"0",100],
[5,0,0,0,6,1,"0",100],
[5,0,0,3,6,1,"0",100],
[5,0,0,1,6,1,"0",100],
[5,0,0,2,7,1,"0",100],

[6,0,0,0,4,1,"0",100],
[6,0,0,3,4,1,"0",100],
[6,0,0,1,5,1,"0",100],
[6,0,0,2,6,1,"0",100],
[6,0,0,1,7,1,"0",100],

[7,0,0,0,4,1,"0",100],
[7,0,0,3,4,1,"0",100],
[7,0,0,2,5,1,"0",100],
[7,0,0,1,6,1,"0",100],
[7,0,0,2,7,1,"0",100],

[8,0,0,0,4,1,"0",100],
[8,0,0,3,4,1,"0",100],
[8,0,0,2,5,1,"0",100],
[8,0,0,1,6,1,"0",100],
[8,0,0,0,6,1,"0",100],
[8,0,0,2,7,1,"0",100],

[9,0,0,0,4,1,"0",100],
[9,0,0,3,4,1,"0",100],
[9,0,0,2,5,1,"0",100],
[9,0,0,1,6,1,"0",100],
[9,0,0,3,6,1,"0",100],
[9,0,0,2,7,1,"0",100],

[10,0,0,0,4,1,"0",100],
[10,0,0,3,4,1,"0",100],
[10,0,0,2,5,1,"0",100],
[10,0,0,1,6,1,"0",100],
[10,0,0,0,6,1,"0",100],
[10,0,0,2,7,1,"0",100],

[11,0,0,0,4,1,"0",100],
[11,0,0,3,4,1,"0",100],
[11,0,0,2,5,1,"0",100],
[11,0,0,1,6,1,"0",100],
[11,0,0,3,6,1,"0",100],
[11,0,0,2,7,1,"0",100],

[12,0,0,0,4,1,"0",100],
[12,0,0,3,4,1,"0",100],
[12,0,0,2,5,1,"0",100],
[12,0,0,1,6,1,"0",100],
[12,0,0,0,6,1,"0",100],
[12,0,0,2,7,1,"0",100],

[13,0,0,0,4,0,"0",100],
[13,0,0,2,5,0,"0",100],
[13,0,0,1,6,0,"0",100],
[13,0,0,3,6,0,"0",100],
[13,0,0,2,7,0,"0",100],

[14,0,6,[0,1,2,3],[0,-100],"11",2],
[14,0,0,0,4,0,"0",100],
[14,0,0,3,4,0,"0",100],
[14,0,0,1,5,0,"0",100],
[14,0,0,2,6,0,"0",100],
[14,0,0,0,6,0,"0",100],
[14,0,0,1,7,0,"0",100],

[15,0,0,0,4,1,"0",200],
[15,0,0,3,4.5,1,"0",200],
[15,0,0,1,5,1,"0",200],
[15,0,0,2,5.25,1,"0",200],
[15,0,0,1,5.5,1,"0",200],
[15,0,0,2,5.75,1,"0",200],
[15,0,0,0,6,1,"0",200],
[15,0,0,0,7,1,"0",200],
[15,0,0,3,7,1,"0",200],


[16,4,6,[0,1,2,3],[0,-100],"11",2],
[16,0,0,0,4,0,"0",200],
[16,0,0,3,4,0,"0",200],
[16,0,0,2,5.5,0,"0",200],
[16,0,0,0,6,0,"0",200],
[16,0,0,3,6,0,"0",200],
[16,0,0,1,7,0,"0",200],
[16,0,0,2,7.5,0,"0",200],

[17,4,6,[0,1,2,3],[0,100],"11",2],
[17,0,0,0,4,0,"0",200],
[17,0,0,3,4,0,"0",200],
[17,0,0,2,4.5,0,"0",200],
[17,0,0,0,5,0,"0",200],
[17,0,0,3,5,0,"0",200],
[17,0,0,1,5.5,0,"0",200],
[17,0,0,1,6,0,"0",200],
[17,0,0,2,6,0,"0",200],
[17,0,0,0,7,0,"0",200],
[17,0,0,3,7,0,"0",200],

[18,4,6,[0,1,2,3],[0,-100],"11",2],
[18,0,0,0,4,0,"0",200],
[18,0,0,2,4,0,"0",200],
[18,0,0,1,5.5,0,"0",200],
[18,0,0,1,6,0,"0",200],
[18,0,0,3,6,0,"0",200],
[18,0,0,0,7,0,"0",200],
[18,0,0,2,7,0,"0",200],

[19,4,6,[0,1,2,3],[0,100],"11",2],
[19,0,0,0,4,0,"0",200],
[19,0,0,3,4,0,"0",200],
[19,0,0,1,4.5,0,"0",200],
[19,0,0,2,5,0,"0",200],
[19,0,0,1,5.5,0,"0",200],
[19,0,0,2,6,0,"0",200],
[19,0,0,0,6,0,"0",200],
[19,0,0,1,6.5,0,"0",200],
[19,0,0,3,7,0,"0",200],
[19,0,0,0,7,0,"0",200],

[20,4,6,[0,1,2,3],[0,100],"11",2],
[20,0,0,0,4,0,"0",200],
[20,0,0,3,4,0,"0",200],
[20,0,0,2,5.5,0,"0",200],
[20,0,0,1,6,0,"0",200],
[20,0,0,0,7,0,"0",200],
[20,0,0,3,7.5,0,"0",200],

[21,4,6,[0,1,2,3],[0,-100],"11",2],
[21,0,0,0,4,0,"0",200],
[21,0,0,1,5,0,"0",200],
[21,0,0,2,6,0,"0",200],
[21,0,0,3,7,0,"0",200],
[21,0,0,0,7.5,0,"0",200],

[22,4,6,[0,1,2,3],[0,100],"11",2],
[22,0,0,0,4,0,"0",200],
[22,0,0,3,4,0,"0",200],
[22,0,0,1,5,0,"0",200],
[22,0,0,0,6,0,"0",200],
[22,0,0,3,6,0,"0",200],
[22,0,0,2,7,0,"0",200],

[23,4,6,[0,1,2,3],[0,-200],"11",2],
[23,0,0,0,4,0,"0",300],
[23,0,0,3,4,0,"0",300],
[23,0,0,1,4.75,0,"0",300],
[23,0,0,2,5,0,"0",300],
[23,0,0,1,5.5,0,"0",300],
[23,0,0,2,6,0,"0",300],
[23,0,0,1,6.5,0,"0",300],
[23,0,0,0,7,0,"0",300],
[23,0,0,1,7.25,0,"0",300],
[23,0,0,2,7.5,0,"0",300],
[23,0,0,3,7.75,0,"0",300],

[24,4,6,[0,1,2,3],[0,-100],"11",2],
[24,0,0,0,4,0,"0",200],
[24,0,0,3,4,0,"0",200],
[24,0,0,2,5.5,0,"0",200],
[24,0,0,0,6,0,"0",200],
[24,0,0,3,6,0,"0",200],
[24,0,0,1,7,0,"0",200],
[24,0,0,2,7.5,0,"0",200],

[25,4,6,[0,1,2,3],[0,100],"11",2],
[25,0,0,0,4,0,"0",200],
[25,0,0,3,5,0,"0",200],
[25,0,0,2,5.5,0,"0",200],
[25,0,0,1,6,0,"0",200],
[25,0,0,3,6,0,"0",200],
[25,0,0,0,7,0,"0",200],
[25,0,0,2,7,0,"0",200],

[26,4,6,[0,1,2,3],[0,-100],"11",2],
[26,0,0,0,4,0,"0",200],
[26,0,0,1,4,0,"0",200],
[26,0,0,3,5,0,"0",200],
[26,0,0,2,5.5,0,"0",200],
[26,0,0,1,6,0,"0",200],
[26,0,0,3,6,0,"0",200],
[26,0,0,3,6.5,0,"0",200],
[26,0,0,1,7,0,"0",200],
[26,0,0,2,7,0,"0",200],
[26,0,0,2,7.5,0,"0",200],

[27,4,6,[0,1,2,3],[0,100],"11",2],
[27,0,0,0,4,0,"0",300],
[27,0,0,3,4.5,0,"0",300],
[27,0,0,2,4.75,0,"0",300],
[27,0,0,1,5,0,"0",300],
[27,0,0,3,5.5,0,"0",300],
[27,0,0,2,5.75,0,"0",300],
[27,0,0,0,6,0,"0",300],
[27,0,0,3,6.5,0,"0",300],
[27,0,0,2,6.75,0,"0",300],
[27,0,0,0,7,0,"0",300],
[27,0,0,2,7,0,"0",300],

[28,4,6,[0,1,2,3],[0,-100],"11",2],
[28,0,0,1,4,0,"0",200],
[28,0,0,2,4,0,"0",200],
[28,0,0,0,5,0,"0",200],
[28,0,0,3,5.5,0,"0",200],
[28,0,0,1,6,0,"0",200],
[28,0,0,2,6,0,"0",200],
[28,0,0,0,7,0,"0",200],
[28,0,0,3,7,0,"0",200],
[28,0,0,2,7.5,0,"0",200],

[29,4,6,[0,1,2,3],[0,100],"11",2],
[29,0,0,0,4,0,"0",200],
[29,0,0,3,4,0,"0",200],
[29,0,0,1,4.5,0,"0",200],
[29,0,0,0,5,0,"0",200],
[29,0,0,3,5,0,"0",200],
[29,0,0,2,5.5,0,"0",200],
[29,0,0,0,6,0,"0",200],
[29,0,0,3,6,0,"0",200],
[29,0,0,1,6.5,0,"0",200],
[29,0,0,1,7,0,"0",200],
[29,0,0,2,7,0,"0",200],

[30,4,6,[0,1,2,3],[0,-100],"11",2],
[30,0,0,0,4,0,"0",200],
[30,0,0,3,4,0,"0",200],
[30,0,0,0,5,0,"0",200],
[30,0,0,1,6,0,"0",200],
[30,0,0,2,7,0,"0",200],

[31,4,6,[0,1,2,3],[0,100],"11",2],
[31,0,0,0,4,0,"0",200],
[31,0,0,3,4,0,"0",200],
[31,0,0,1,4.5,0,"0",200],
[31,0,0,2,5,0,"0",200],
[31,0,0,1,5.5,0,"0",200],
[31,0,0,0,6,0,"0",200],
[31,0,0,3,6,0,"0",200],
[31,0,0,1,6.5,0,"0",200],
[31,0,0,2,6.5,0,"0",200],
[31,0,0,0,7,0,"0",200],
[31,0,0,3,7,0,"0",200],

[32,4,6,[0,2],[0,100],"11",1],
[32,4,6,[1,3],[0,-100],"11",1],
[32,5,6,[0,2],[0,-100],"11",1],
[32,5,6,[1,3],[0,100],"11",1],
[32,6,6,[0,2],[0,100],"11",1],
[32,6,6,[1,3],[0,-100],"11",1],
[32,7,6,[0,2],[0,-100],"11",1],
[32,7,6,[1,3],[0,100],"11",1],

[32,0,0,0,4,0,"0",200],
[32,0,0,3,4,0,"0",200],
[32,0,0,1,5,0,"0",200],
[32,0,0,2,5,0,"0",200],
[32,0,0,0,6,0,"0",200],
[32,0,0,1,6.5,0,"0",200],
[32,0,0,2,7,0,"0",200],
[32,0,0,3,7.5,0,"0",200],

[33,4,6,[0,2],[0,-100],"11",1],
[33,4,6,[1,3],[0,100],"11",1],
[33,5,6,[0,2],[0,100],"11",1],
[33,5,6,[1,3],[0,-100],"11",1],
[33,6,6,[0,2],[0,-100],"11",1],
[33,6,6,[1,3],[0,100],"11",1],
[33,7,6,[0,2],[0,100],"11",1],
[33,7,6,[1,3],[0,-100],"11",1],

[33,0,0,0,4,0,"0",200],
[33,0,0,3,4,0,"0",200],
[33,0,0,1,6,0,"0",200],
[33,0,0,2,6.5,0,"0",200],
[33,0,0,0,7,0,"0",200],
[33,0,0,3,7,0,"0",200],

[34,4,6,[0,2],[0,100],"11",1],
[34,4,6,[1,3],[0,-100],"11",1],
[34,5,6,[0,2],[0,-100],"11",1],
[34,5,6,[1,3],[0,100],"11",1],
[34,6,6,[0,2],[0,100],"11",1],
[34,6,6,[1,3],[0,-100],"11",1],
[34,7,6,[0,2],[0,-100],"11",1],
[34,7,6,[1,3],[0,100],"11",1],

[32,0,0,1,4,0,"0",200],
[32,0,0,2,4,0,"0",200],
[32,0,0,0,5,0,"0",200],
[32,0,0,3,5,0,"0",200],
[32,0,0,0,6,0,"0",200],
[32,0,0,1,6.5,0,"0",200],
[32,0,0,3,7,0,"0",200],
[32,0,0,2,7.5,0,"0",200],

]


#[0,0,6,[0],[0,100],"11",4],
#[0,2,6,[1],[0,100],"11",4],
#[1,0,6,[2],[0,100],"11",4],
#[1,2,6,[3],[0,100],"11",4]

taglist = {}

"""
tag = ""
if (tag in taglist):
    taglist[tag] = taglist[tag] + [tag]
else:
    taglist[tag] = [tag]

"""
note_humen = []
"""
ノーツがあります[拍,humenのインデックス番号,落ちるところ,何拍先か,判定ラインに同期してるか,速度,[x座標,y座標]]
"""
note_temp = []
"""
移動させる[拍,ハンドルリストのインデックス番号,[x座標,y座標],ベジェ曲線の名前]
"""
#いろいろ訳あって判定ラインの位置は事前に取得している必要がある
#長さは nagasa/BPM*60*fps
#書き方:[[1つめのx座標,1つめy座標],[2つめのx座標,2つめのy座標]...
j_l = []
#↑の前にこっちを組み立てる
#テレポートさせる[何泊からか,0,レイヤー,[x座標,y座標]]
#移動させる[何泊からか,1,何泊あるか,レイヤー,[x座標,y座標],ベジェ曲線の名前]
ibent_j_l = []

bejelist = {}

for i in range(len(humen)):
    imahumen = humen[i]
    if(imahumen[2] == 0):
        note_humen += [[imahumen[0]*4 + imahumen[1],i,imahumen[3],imahumen[4],imahumen[5],imahumen[7]]]
        tag = imahumen[6]
        if (tag in taglist):
            taglist[tag] = taglist[tag] + [tag]
        else:
            taglist[tag] = [tag]
    
    if(imahumen[2] == 1):
        pass
    if(imahumen[2] == 2):
        pass
    if(imahumen[2] == 3):
        pass
    if(imahumen[2] == 4):
        bejelist[imahumen[3]] = imahumen[4]
    if(imahumen[2] == 5):
        ibent_j_l += [[imahumen[0]*4 + imahumen[1],0,imahumen[3],imahumen[4]]]
    if(imahumen[2] == 6):
        ibent_j_l += [[imahumen[0]*4 + imahumen[1],1,imahumen[6],imahumen[3],imahumen[4],imahumen[5]]]

# 2項係数計算
def BiCoe(n, k):
    if n < k :
        return -1
    return math.factorial(n) / (math.factorial(k) * math.factorial((n - k)))

# Bernstein多項式
def Bernstein(n, i, t):
    return BiCoe(n, i) * math.pow((1-t), (n-i)) * math.pow(t , i)

# ベジェ曲線
def beje(t,points):
    Gt = [0,0]
    n = len(points) - 1
    for k in range(len(points)):
        Gt[0] += points[k][0] * Bernstein(n, k, t)
        Gt[1] += points[k][1] * Bernstein(n, k, t)

    return Gt



temp_beje = [0,0]

#ジャッジラインの規定位置:[0,360]横は上で設定
ima_j_l = []
for i in range(bunkatu):
    ima_j_l.append([i * window_yoko + window_ma_zin * i,360])


temp = []
imahumen_count = 0
for i in range(int(nagasa/BPM*60*fps)):
    if not(imahumen_count == len(ibent_j_l)):
        while ( (i) / fps / 60 * BPM >= ibent_j_l[imahumen_count][0]):
            imahumen = ibent_j_l[imahumen_count]
            if (imahumen[1] == 0):
                for e in imahumen[2]:
                    ima_j_l[e][0] = imahumen[3][0] + ima_j_l[e][0]
                    ima_j_l[e][1] = imahumen[3][1] + ima_j_l[e][1]
            if (imahumen[1] == 1):
                for e in imahumen[3]:
                    temp.append([imahumen[2],0,0,e,imahumen[4],imahumen[5]])
            imahumen_count += 1
            if (imahumen_count == len(ibent_j_l)):
                break
    sakujolist = []
    for e in range(len(temp)):
        imahumen = temp[e]
        if (imahumen[2] == 0):
            if (imahumen[1] == 0):
                hoge = [0,0]
            else:
                temp_beje[0] = beje((imahumen[1] - (1 / fps / 60 * BPM))/imahumen[0],bejelist[imahumen[5]])
                temp_beje[1] = beje(imahumen[1]/imahumen[0],bejelist[imahumen[5]])
                hoge = [temp_beje[0][0] - temp_beje[1][0],temp_beje[0][1] - temp_beje[1][1]]
            ima_j_l[imahumen[3]] = [hoge[0] * imahumen[4][0] + ima_j_l[imahumen[3]][0],hoge[1] * imahumen[4][1] + ima_j_l[imahumen[3]][1]]


            if not(imahumen[0] <= imahumen[1]):
                imahumen[1] = imahumen[1] + 1 / fps / 60 * BPM
            else:
                sakujolist.append(e)
    
    sakujolist = sorted(sakujolist,reverse=True)
    for e in sakujolist:
        temp.pop(e)
                
    j_l.append(copy.deepcopy(ima_j_l))

tick = 0
imahumen_count = 0
temp = []




hwnd_list = []

window_kazu = 30

for i in range(window_kazu):
    #print("note:" + str(note))
    root = tk.Toplevel(bg="snow")
    #root.wm_attributes('-transparentcolor','snow')
    root.bind("<KeyPress>", key_event)
    root.update()        ###　これで、画面にちゃんと表示されてからhWndを取得
    hwnd_list.append(int(root.frame(),16)) ###　ここ、リンク先と違ってます
    win32gui.MoveWindow(hwnd_list[-1], 0, 720, 0, 0,True)
    #win32gui.ShowWindow(hwnd_list[-1][1], win32con.SW_MINIMIZE)

saisho_time = time.time()
BGM.play()
window_list_mae = [0 for i in range(window_kazu)]
while  nagasa / BPM * 60 * fps >= tick + 1:
    haku = tick / fps / 60 * BPM
    window_list = []

    if not(imahumen_count == len(note_humen)):
            while ( tick / fps / 60 * BPM >= note_humen[imahumen_count][0]):
                imahumen = note_humen[imahumen_count]
                temp.append([imahumen[1],imahumen[3],0,imahumen[2],imahumen[4],imahumen[5],[0,0],imahumen[0] + imahumen[3]])
                imahumen_count += 1
                if (imahumen_count == len(note_humen)):
                    break

    temp_soted = sorted(temp, key=lambda x: x[7])
    hantei_kekka = []
    sakujolist = []
    play = False
    for i in range(bunkatu):
        hantei_kekka = [False for i in range(bunkatu)]
        if hantei_input[i] == True:
            for e in range(len(temp_soted)):
                if (haku - hantei_ma_zin <= temp_soted[e][7] <= haku + hantei_ma_zin and temp_soted[e][3] == i):
                    #playsound(se_path, False)
                    play = True
                    sakujolist.append(e)
                    break
    hantei_input = [False for i in range(bunkatu)]
    if play:
        se.play()
    for e in sakujolist:
        temp.pop(e)
    
    sakujolist = []

    for i in range(len(temp)):
        imahumen = temp[i]
        if (imahumen[4] == 0):
            hoge = [j_l[tick][imahumen[3]][0],j_l[tick][imahumen[3]][1] - (imahumen[1] - imahumen[2]) * imahumen[5]]
        
        if (imahumen[4] == 1):
            hoge = [j_l[int(tick + (imahumen[1] - imahumen[2]) / BPM * 60 * fps)][imahumen[3]][0],j_l[int(tick + (imahumen[1] - imahumen[2]) / BPM * 60 * fps)][imahumen[3]][1] - (imahumen[1] - imahumen[2]) * imahumen[5]]
        
        if not(imahumen[1] + hantei_ma_zin <= imahumen[2]):
            imahumen[2] = imahumen[2] + 1 / fps / 60 * BPM
            window_list.append(hoge)
        else:
            pass
            #sakujolist.append(e)
    
    for e in sakujolist:
        temp.pop(e)
    window_list += j_l[tick]
    tick += 1
    
    if (len(window_list) > len(hwnd_list)):
        print("ウィンドウ足りねえよあほ！！")
        input()


    for i in range(len(window_list)):
        if not(window_list_mae[i] == window_list[i]):
            win32gui.MoveWindow(hwnd_list[i], int(window_list[i][0]), int(window_list[i][1]), window_yoko, 0,True)
    window_temp = len(window_list)
    for i in range(len(hwnd_list) - window_temp):
        if not(window_list_mae[i] == [0,0]):
            win32gui.MoveWindow(hwnd_list[i + window_temp], 0, 0, 0, 0,True)
        window_list.append([0,0])
    window_list_mae = window_list

    while (time.time() - saisho_time)*fps < tick + 1:
        pass
    root.update()